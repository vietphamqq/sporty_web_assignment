name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Chrome browser
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable
        
    - name: Verify Chrome installation
      run: |
        google-chrome --version
        which google-chrome
        
    - name: Create reports directories
      run: |
        mkdir -p reports/html
        mkdir -p reports/allure/results
        mkdir -p reports/screenshots
        mkdir -p reports/logs
        
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ \
          --headless \
          --html-report \
          --html reports/html/test_report.html \
          --self-contained-html \
          --allure-report \
          --alluredir reports/allure/results \
          -v \
          --tb=short
      env:
        HEADLESS: true
        
    - name: Upload HTML test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: html-test-report
        path: reports/html/
        retention-days: 30
        
    - name: Upload Allure results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results
        path: reports/allure/results/
        retention-days: 30
        
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: screenshots
        path: reports/screenshots/
        retention-days: 30
        
    - name: Upload logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-logs
        path: reports/logs/
        retention-days: 30

  allure-report:
    name: Generate Allure Report
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    needs: test
    if: always()
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Allure results
      uses: actions/download-artifact@v4
      with:
        name: allure-results
        path: allure-results
        
    - name: Generate Allure report
      uses: simple-elf/allure-report-action@master
      if: always()
      with:
        allure_results: allure-results
        allure_report: allure-report
        gh_pages: gh-pages
        allure_history: allure-history
        
    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4
      with:
          token: ${{ secrets.GITHUB_TOKEN }}  
      
    - name: Upload Pages artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: allure-history
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4
      with:
          token: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Run Black (code formatting)
      run: |
        black --check --diff .
      continue-on-error: true
      
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff .
      continue-on-error: true
      
    - name: Run flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      continue-on-error: true
      
    - name: Run mypy (type checking)
      run: |
        mypy --ignore-missing-imports --no-strict-optional .
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run Safety (dependency vulnerability scan)
      run: |
        safety check
      continue-on-error: true
      
    - name: Run Bandit (security linting)
      run: |
        bandit -r . -x ./venv,./tests -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
        retention-days: 30

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, allure-report, lint, security]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' }}
      run: |
        echo "‚úÖ All tests passed successfully!"
        echo "üìä Test artifacts have been uploaded"
        echo "üìà Allure Report: https://vietphamqq.github.io/sporty_web_assignment/${{ github.run_number }}/index.html"
        echo "üîó Check the Actions tab for detailed reports"
        
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' }}
      run: |
        echo "‚ùå Some tests failed!"
        echo "üìä Test artifacts have been uploaded for analysis"
        echo "üìà Allure Report: https://vietphamqq.github.io/sporty_web_assignment/${{ github.run_number }}/index.html"
        echo "üîó Check the Actions tab for detailed reports"
